ctmc


const double ws_fail;const double ws_check;const double ws_repair;

const int N = 10;
const int left_mx = N;
const int right_mx = N;
const int init_N = 5;
const int k = floor (0.75*N);
const int l = floor (1.25*N);
const double switch_fail = 1/4000;
const double line_fail = 1/5000;
const double switch_check = 10;
const double line_check = 10;

module Left
	left_n:[0..left_mx] init 5;
	left:[0..1] init 0;

	[startLeft]	left = 0&( left_n<left_mx ) -> 1:(left' = 1);
	[repairLeft]	left = 1&( left_n<left_mx ) -> 1:(left' = 0) & (left_n' = left_n+1);
	[crepairLeft]	left = 1&( left_n<left_mx ) -> 1:(left' = 0) & (left_n' = left_n+1);
	[nrepairLeft]	left = 1&( left_n<left_mx ) -> 1:(left' = 0);
	[]	(left_n > 0) -> ws_fail*left_n:(left_n' = left_n-1);
endmodule 


module Right
	right_n:[0..right_mx] init 5;
	right:[0..1] init 0;

	[startRight]	right = 0&( right_n<right_mx ) -> 1:(right' = 1);
	[repairRight]	right = 1&( right_n<right_mx ) -> 1:(right' = 0) & (right_n' = right_n+1);
	[crepairRight]	right = 1&( right_n<right_mx ) -> 1:(right' = 0) & (right_n' = right_n+1);
	[nrepairRight]	right = 1&( right_n<right_mx ) -> 1:(right' = 0);
	[]	(right_n > 0) -> ws_fail*right_n:(right_n' = right_n-1);
endmodule 


// Repair unit
module Repairman
	
	r : [0..1] init 0; // Repairing?
	
	[startLeft]    r=0 -> ws_check 		: (r'=1); // Inspect Left
	[startRight]   r=0 -> ws_check 		: (r'=1); // Inspect Right
	[startToLeft]  r=0 -> switch_check 	: (r'=1); // Inspect ToLeft
	[startToRight] r=0 -> switch_check 	: (r'=1); // Inspect ToRight
	[startLine]    r=0 -> line_check 	: (r'=1); // Inspect Line
	
	[repairLeft]    r=1 -> ws_repair    : (r'=0); // Repair Left
	[repairRight]   r=1 -> ws_repair    : (r'=0); // Repair Right
	[repairToLeft]  r=1 -> 0.25  		: (r'=0); // Repair ToLeft
	[repairToRight] r=1 -> 0.25  		: (r'=0); // Repair ToRight
	[repairLine]    r=1 -> 0.125 		: (r'=0); // Repair Line
	
	[nrepairLeft]    false -> ws_repair	: (r'=0); // no Repair Left 
	[nrepairRight]   false -> ws_repair : (r'=0); // no Repair Right
	[nrepairToLeft]  false -> 0.25  	: (r'=0); // no Repair ToLeft
	[nrepairToRight] false -> 0.25  	: (r'=0); // no Repair no ToRight
	[nrepairLine]    false -> 0.125 	: (r'=0); // no Repair Line

	[crepairLeft]    false -> ws_repair : (r'=0); // Repair Left 
	[crepairRight]   false -> ws_repair : (r'=0); // Repair Right
	[crepairToLeft]  false -> 0.25  	: (r'=0); // Repair ToLeft
	[crepairToRight] false -> 0.25  	: (r'=0); // Repair ToRight
	[crepairLine]    false -> 0.125 	: (r'=0); // Repair Line
endmodule


module Line
	line:[0..1] init 0;
	line_n:[0..1] init 1;

	[startLine]	line = 0&line_n=0 -> 1:(line' = 1);
	[repairLine]	line = 1&line_n=0 -> 1:(line' = 0) & (line_n' = 1);
	[crepairLine]	line = 1&line_n=0 -> 1:(line' = 0) & (line_n' = 1);
	[nrepairLine]	line = 1&line_n=0 -> 1:(line' = 0);
	[]	line_n = 1 -> line_fail:(line_n' = 0);
endmodule 


module ToLeft
	toleft:[0..1] init 0;
	toleft_n:[0..1] init 1;

	[startToLeft]	toleft = 0&toleft_n=0 -> 1:(toleft' = 1);
	[repairToLeft]	toleft = 1&toleft_n=0 -> 1:(toleft' = 0) & (toleft_n' = 1);
	[crepairToLeft]	toleft = 1&toleft_n=0 -> 1:(toleft' = 0) & (toleft_n' = 1);
	[nrepairToLeft]	toleft = 1&toleft_n=0 -> 1:(toleft' = 0);
	[]	toleft_n = 1 -> switch_fail:(toleft_n' = 0);
endmodule 


module ToRight
	toright:[0..1] init 0;
	toright_n:[0..1] init 1;

	[startToRight]	toright = 0&toright_n=0 -> 1:(toright' = 1);
	[repairToRight]	toright = 1&toright_n=0 -> 1:(toright' = 0) & (toright_n' = 1);
	[crepairToRight]	toright = 1&toright_n=0 -> 1:(toright' = 0) & (toright_n' = 1);
	[nrepairToRight]	toright = 1&toright_n=0 -> 1:(toright' = 0);
	[]	toright_n = 1 -> switch_fail:(toright_n' = 0);
endmodule 

rewards "percent_op"
	 true :100*( left_n+right_n )/( 2*N );
endrewards

rewards "num_repairs"
	[repairLeft] true :1;
	[repairRight] true :1;
	[repairToLeft] true :1;
	[repairToRight] true :1;
	[repairLine] true :1;
endrewards

rewards "cost"
	[repairToLeft] true :left_n;
	[repairToRight] true :right_n;
	[repairLine] true :left_n+right_n;
endrewards

rewards "cost2"
	[repairLeft] true :1;
	[repairRight] true :1;
	[repairToLeft] true :20*left_n;
	[repairToRight] true :20*right_n;
	[repairLine] true :50*( left_n+right_n );
endrewards

rewards "required_operational"
	60<=100*( left_n+right_n )/( 2*N )&100*( left_n+right_n )/( 2*N )<=80:1;
endrewards

rewards "cost3"
	[repairLeft] true :1;
	[repairRight] true :1;
	[repairToLeft] true :2+20*left_n;
	[repairToRight] true :2+20*right_n;
	[repairLine] true :8+50*( left_n+right_n );
	[crepairLeft] true :1;
	[crepairRight] true :1;
	[crepairToLeft] true :2+10*left_n;
	[crepairToRight] true :2+10*right_n;
	[crepairLine] true :8+25*( left_n+right_n );
endrewards
