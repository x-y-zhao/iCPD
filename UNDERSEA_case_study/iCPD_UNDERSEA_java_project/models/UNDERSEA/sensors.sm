
ctmc

//Parameters (MOOS)
const double r1; 	 // sensor's 1 rate
const double r2=4;	 // sensor's 2 rate
const double r3=3.5; 	 // sensor's 3 rate

const double p1=1-0.1*s;	// sensor's 1 success probability
const double p2=1-0.15*s; 	// sensor's 2 success probability
const double p3=1-0.05*s;	// sensor's 3 success probability

const int CSC=7; 		// current  sensors configuration
const int PSC=7;		// previous sensors configuration
const double s=3.5;		// uuv speed 

//--------------------------------------------------------------


//Sensor configuration variables
const int SENSOR1_MOD=2; // 2^n
const int SENSOR2_MOD=4;
const int SENSOR3_MOD=8; 

const int SENSOR1_MOD_RESULT = 0; //2^(n-1)-1
const int SENSOR2_MOD_RESULT = 1;
const int SENSOR3_MOD_RESULT = 3;


//Formulae
formula sensor1SwitchCost = (mod(CSC,SENSOR1_MOD)>SENSOR1_MOD_RESULT) & (mod(PSC,SENSOR1_MOD)<=SENSOR1_MOD_RESULT) ? 10 : (mod(CSC,SENSOR1_MOD)<=SENSOR1_MOD_RESULT) & (mod(PSC,SENSOR1_MOD)>SENSOR1_MOD_RESULT) ? 2.0 : 0;
formula sensor2SwitchCost = (mod(CSC,SENSOR2_MOD)>SENSOR2_MOD_RESULT) & (mod(PSC,SENSOR2_MOD)<=SENSOR2_MOD_RESULT) ?  8 : (mod(CSC,SENSOR2_MOD)<=SENSOR2_MOD_RESULT) & (mod(PSC,SENSOR2_MOD)>SENSOR2_MOD_RESULT) ? 1.5 : 0;
formula sensor3SwitchCost = (mod(CSC,SENSOR3_MOD)>SENSOR3_MOD_RESULT) & (mod(PSC,SENSOR3_MOD)<=SENSOR3_MOD_RESULT) ?  5 : (mod(CSC,SENSOR3_MOD)<=SENSOR3_MOD_RESULT) & (mod(PSC,SENSOR3_MOD)>SENSOR3_MOD_RESULT) ? 1.0 : 0;

formula sensor1Enabled =  mod(CSC,SENSOR1_MOD)>SENSOR1_MOD_RESULT;
formula sensor2Enabled =  mod(CSC,SENSOR2_MOD)>SENSOR2_MOD_RESULT;
formula sensor3Enabled =  mod(CSC,SENSOR3_MOD)>SENSOR3_MOD_RESULT;


module sensor1
	// system states
	stateS1 : [0..6] init 0; // 0:start - 1:on - 2:read - 3:succ - 4: fail - 5:done - 6:off

	[switchS1] 	(stateS1=0) & (sensor1Enabled)  -> 1000.0 : (stateS1'=1);
	[switchS1] 	(stateS1=0) & (!sensor1Enabled) -> 1000.0 : (stateS1'=6);
	[readS1] 	(stateS1=1)  -> r1 : (stateS1'=2);
	[succReadS1] 	(stateS1=2) ->1000.0* p1 : (stateS1'=3);
	[] 	 	(stateS1=2) ->1000.0* (1-p1): (stateS1'=4);
	[] 	 	(stateS1=3) -> 1000.0 : (stateS1'=5);
	[] 		(stateS1=4) -> 1000.0 : (stateS1'=5);
	[] 		(stateS1=5) -> 1000.0 : (stateS1'=1);
	[] 		(stateS1=6) -> 1000.0 : (stateS1'=6);
endmodule

module sensor2 = sensor1 [stateS1=stateS2, SENSOR1_MOD=SENSOR2_MOD, SENSOR1_MOD_RESULT=SENSOR2_MOD_RESULT, p1=p2, r1=r2, switchS1=switchS2, succReadS1=succReadS2, readS1=readS2] endmodule

module sensor3 = sensor1 [stateS1=stateS3, SENSOR1_MOD=SENSOR3_MOD, SENSOR1_MOD_RESULT=SENSOR3_MOD_RESULT, p1=p3, r1=r3, switchS1=switchS3, succReadS1=succReadS3, readS1=readS3] endmodule

 
rewards "measurement"
	[succReadS1] true : 1;
	[succReadS2] true : 1;
	[succReadS3] true : 1;
endrewards


rewards "energy"
	[readS1] true : 3;
	[readS2] true : 2.4;
	[readS3] true : 2.1;
	[switchS1] true : sensor1SwitchCost;
	[switchS2] true : sensor2SwitchCost;
	[switchS3] true : sensor3SwitchCost;
endrewards

